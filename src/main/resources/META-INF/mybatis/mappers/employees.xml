<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.web.mapper.EmployeeDao">

    <select id="getEmployeesByJobId" parameterType="string" resultType="Employee">
        select
            employee_id     as id,
            first_name      as firstName,
            last_name       as lastName,
            email,
            phone_number    as phoneNumber,
            hire_date       as hireDate,
            job_id          as "job.id",
            salary,
            commission_pct  as commissionPct,
            manager_id      as "manager.id",
            department_id   as "department.id"
        from
            employees
        where
            job_id = #{job_id}
    </select>

    <select id="getEmployeeById" parameterType="int" resultType="Employee">
        select
            employee_id     as id,
            first_name      as firstName,
            last_name       as lastName,
            email,
            phone_number    as phoneNumber,
            hire_date       as hireDate,
            job_id          as "job.id",
            salary,
            commission_pct  as commissionPct,
            manager_id      as "manager.id",
            department_id   as "department.id"
        from
            employees
        where
            employee_id = #{employee_id}
    </select>

    <select id="getAllEmployees">
        select
            employee_id     as id,
            first_name      as firstName,
            last_name       as lastName,
            email,
            phone_number    as phoneNumber,
            hire_date       as hireDate,
            job_id          as "job.id",
            salary,
            commission_pct  as commissionPct,
            manager_id      as "manager.id",
            department_id   as "department.id"
        from
            employees
        order by
            employee_id
    </select>

    <select id="getEmployeesByDepartmentId" parameterType="int" resultType="Employee">
        select
            employee_id     as id,
            first_name      as firstName,
            last_name       as lastName,
            email,
            phone_number    as phoneNumber,
            hire_date       as hireDate,
            job_id          as "job.id",
            salary,
            commission_pct  as commissionPct,
            manager_id      as "manager.id",
            department_id   as "department.id"
        from
            employees
        where
            department_id = #{department_id}
        order by
            first_name, last_name
    </select>

    <insert id="insertEmployee" parameterType="Employee">
        insert into employees (
        first_name, last_name, email, phone_number, hire_date, job_id, salary, commission_pct, manager_id, department_id
        )
        values (
            #{firstName}, #{lastName}, #{email}, #{phoneNumber}, #{hireDate}, #{job.id}, #{salary}, #{commissionPct}, #{manager.id}, #{department.id}
        )
    </insert>

    <select id="getTotalRows" parameterType="map" resultType="int">
        select
            count(*)
        from
            employees
        <where>
            <if test="opt == 'name' and keyword != ''">
                first_name = #{keyword} or last_name = #{keyword}
            </if>
            <if test="opt == 'job' and keyword != ''">
                job_id = UPPER(#{keyword})
            </if>
            <if test="opt == 'phone' and keyword != ''">
                phone_number = #{keyword}
            </if>
            <if test="opt == 'dept' and keyword != ''">
                department_id in (
                    select department_id from departments where department_name = #{keyword}
                )
            </if>
        </where>
    </select>

    <select id="getEmployeesPaginated" parameterType="map" resultType="Employee">
        SELECT *
        FROM (
            SELECT
                E.employee_id       AS id,
                E.first_name        AS firstName,
                E.last_name         AS lastName,
                E.email,
                E.phone_number      AS phoneNumber,
                E.hire_date         AS hireDate,
                E.job_id            AS `job.id`,
                E.salary,
                E.commission_pct    AS commissionPct,
                E.manager_id        AS `manager.id`,
                E.department_id     AS `department.id`,
                CASE
                    WHEN #{sort} = 'id' THEN row_number() OVER (ORDER BY E.employee_id ASC)
                    WHEN #{sort} = 'name' THEN row_number() OVER (ORDER BY E.first_name ASC)
                    WHEN #{sort} = 'date' THEN row_number() OVER (ORDER BY E.hire_date ASC)
                    WHEN #{sort} = 'job' THEN row_number() OVER (ORDER BY E.job_id ASC)
                    WHEN #{sort} = 'dept' THEN row_number() OVER (ORDER BY E.department_id ASC)
                END AS rownum
            FROM employees E
            <where>

                    E.first_name = #{keyword} OR E.last_name = #{keyword} OR E.city = #{keyword} OR E.foodCategory = #{keyword} OR OR OR

                <if test="opt == 'job' and keyword != ''">
                    E.job_id = UPPER(#{keyword})
                </if>
                <if test="opt == 'phone' and keyword != ''">
                    E.phone_number = #{keyword}
                </if>
                <if test="opt == 'dept' and keyword != ''">
                    E.department_id IN (
                    SELECT department_id FROM departments WHERE department_name = UPPER(#{keyword})
                    )
                </if>
            </where>
        ) AS subquery
        WHERE rownum BETWEEN #{begin} AND #{end}
    </select>

    <select id="getEmployeesPaginatedByJoin" parameterType="map" resultType="Employee">
        SELECT *
        FROM (
            SELECT
                E.employee_id       AS id,
                E.first_name        AS firstName,
                E.last_name         AS lastName,
                E.email,
                E.phone_number      AS phoneNumber,
                E.hire_date         AS hireDate,
                E.job_id            AS `job.id`,
                J.job_title         AS `job.title`,
                J.min_salary        AS `job.minSalary`,
                J.max_salary        AS `job.maxSalary`,
                E.salary,
                E.commission_pct    AS commissionPct,
                E.manager_id        AS `manager.id`,
                M.first_name        AS `manager.firstName`,
                M.last_name         AS `manager.lastName`,
                M.email             AS `manager.email`,
                M.phone_number      AS `manager.phoneNumber`,
                M.hire_date         AS `manager.hireDate`,
                M.job_id            AS `manager.job.id`,
                M.salary            AS `manager.salary`,
                M.commission_pct    AS `manager.commissionPct`,
                M.manager_id        AS `manager.manager.id`,
                M.department_id     AS `manager.department.id`,
                E.department_id     AS `department.id`,
                D.department_name   AS `department.name`,
                D.manager_id        AS `department.manager.id`,
                D.location_id       AS `department.loc`,
                CASE
                    WHEN #{sort} = 'id' THEN row_number() OVER (ORDER BY E.employee_id ASC)
                    WHEN #{sort} = 'name' THEN row_number() OVER (ORDER BY E.first_name ASC)
                    WHEN #{sort} = 'date' THEN row_number() OVER (ORDER BY E.hire_date ASC)
                    WHEN #{sort} = 'job' THEN row_number() OVER (ORDER BY E.job_id ASC)
                    WHEN #{sort} = 'dept' THEN row_number() OVER (ORDER BY E.department_id ASC)
                END AS rownum
            FROM employees E
            INNER JOIN jobs J on J.job_id = E.job_id
            INNER JOIN employees M on M.employee_id = E.manager_id
            INNER JOIN departments D on D.department_id = E.department_id
            <where>
                <if test="opt == 'name' and keyword != ''">
                    E.first_name = #{keyword} OR E.last_name = #{keyword}
                </if>
                <if test="opt == 'job' and keyword != ''">
                    E.job_id = UPPER(#{keyword})
                </if>
                <if test="opt == 'phone' and keyword != ''">
                    E.phone_number = #{keyword}
                </if>
                <if test="opt == 'dept' and keyword != ''">
                    E.department_id IN (
                        SELECT department_id FROM departments WHERE department_name = UPPER(#{keyword})
                    )
                </if>
            </where>
        ) AS subquery
        WHERE rownum BETWEEN #{begin} AND #{end}
    </select>

<!--    <select id="getEmployeesPaginated" parameterType="map" resultType="Employee">-->
<!--        select-->
<!--            *-->
<!--        from (-->
<!--            select-->
<!--                E.employee_id     as id,-->
<!--                E.first_name      as firstName,-->
<!--                E.last_name       as lastName,-->
<!--                E.email,-->
<!--                E.phone_number    as phoneNumber,-->
<!--                E.hire_date       as hireDate,-->
<!--                E.job_id          as "job.id",-->
<!--                E.salary,-->
<!--                E.commission_pct  as commissionPct,-->
<!--                E.manager_id      as "manager.id",-->
<!--                E.department_id   as "department.id"-->
<!--                <choose>-->
<!--                    <when test="params.sort == id">-->
<!--                        row_number() over (order by E.employee_id asc) rownum-->
<!--                    </when>-->
<!--                    <when test="params.sort == name">-->
<!--                        row_number() over (order by E.first_name asc) rownum-->
<!--                    </when>-->
<!--                    <when test="params.sort == date">-->
<!--                        row_number() over (order by E.hire_date asc) rownum-->
<!--                    </when>-->
<!--                    <when test="params.sort == job">-->
<!--                        row_number() over (order by E.job_id asc) rownum-->
<!--                    </when>-->
<!--                    <when test="params.sort == dept">-->
<!--                        row_number() over (order by E.department_id asc) rownum-->
<!--                    </when>-->
<!--                </choose>-->
<!--            from employees E-->
<!--&lt;!&ndash;            right join departments D on D.department_id = E.department_id&ndash;&gt;-->
<!--            <where>-->
<!--                <choose>-->
<!--                    <when test="params.opt == 'name'"> E.first_name = INITCAP(#{params.keyword}) or last_name = INITCAP(#{params.keyword}) </when>-->
<!--                    <when test="params.opt == 'job'"> E.job_id = UPPER(#{params.keyword}) </when>-->
<!--                    <when test="params.opt == 'phone'"> E.phone_number = #{params.keyword} </when>-->
<!--                    <when test="params.opt == 'dept'">-->
<!--                        E.department_id in (-->
<!--                            select department_id from departments where department_name = INITCAP(#{params.keyword})-->
<!--                        )-->
<!--                    </when>-->
<!--                </choose>-->
<!--            </where>-->
<!--        )-->
<!--        where-->
<!--            rownum between #{params.begin} and #{params.end}-->
<!--    </select>-->
</mapper>